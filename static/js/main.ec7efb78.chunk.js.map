{"version":3,"sources":["components/NASA/assets/Map-2-icon.png","components/NASA/NASA.js","components/OpenWeather/WeatherResults.js","components/OpenWeather/OpenWeather.js","components/Zomato/Restaurant.js","components/Zomato/Zomato.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NASA","props","useState","imgPlacehold","NASAData","setNASAData","useEffect","url","longitude","latitude","fetch","then","res","blob","photo","photoURL","URL","createObjectURL","catch","err","console","log","fetchNASA","Col","className","md","src","alt","WeatherResults","weatherData","windSpeed","wind","speed","toPrecision","pressure","main","Math","floor","temp","temperatureFahrenheit","temperatureCelsius","temperatureType","setTemperatureType","name","weather","Button","color","size","onClick","humidity","OpenWeather","setWeatherData","json","fetchWeather","hasOwnProperty","Restaurant","Card","id","CardTitle","restaurant","CardBody","cuisines","CardText","average_cost_for_two","phone_numbers","location","address","user_rating","rating_text","aggregate_rating","Zomato","restaurants","setRestaurants","searchString","method","headers","Headers","restaurantData","fetchRestaurants","Row","length","map","App","setLatitude","setLongitude","locationDataFound","setLocationDataFound","geolocationAvailable","setGeolocationAvailable","getLocation","navigator","geolocation","getCurrentPosition","showPosition","position","coords","Container","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ec7efb78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Map-2-icon.708d9ec5.png\";","import React, { useState, useEffect} from 'react';\nimport {Col} from 'reactstrap';\nimport './NASA.css';\nimport imgPlacehold from './assets/Map-2-icon.png';\n\n\nconst baseNASA_URL = 'https://api.nasa.gov/planetary/earth/imagery'\nconst api_key = 'BYJLRhF7aUhylkiuwEYnRjfyTgdlQPb8EyGfBjZr'\n\nconst NASA = (props) => {\n\n    const [NASAData, setNASAData] = useState(imgPlacehold);\n    // const [location, setLocation] = useState('Your Location')\n\n    // const getLocation = () => {\n\n    //     let baseURL = 'https://developers.zomato.com/api/v2.1/search?';\n    //     let searchString = `lat=${props.latitude}&lon=${props.longitude}&&sort=real_distance`;\n    //     let zomatoAPIKey= \"ac470f024f2131c285d68377ed5cc6d0\";\n        \n    //     fetch(baseURL + searchString, {\n    //         method: 'GET',\n    //         headers:    new Headers ({\n    //             'Content-Type': 'application/json',\n    //             'user-key': zomatoAPIKey\n    //         })\n    //     })\n    //     .then(res => res.json())\n    //     .then(location => setLocation(location.restaurants[0].restaurant.location.city))\n    //     .catch(err => console.log(err))\n        \n    // };\n    \n    const fetchNASA = () => {\n    let url = `${baseNASA_URL}?lon=${props.longitude}&lat=${props.latitude}&dim=0.10&date=2016-01-01&api_key=${api_key}`\n    // console.log(url);\n    fetch(url)\n    .then(res => res.blob())\n    .then(photo => {\n        let photoURL = URL.createObjectURL(photo)\n        setNASAData(photoURL)\n    })\n    .catch(err => console.log(err))\n    };\n\n    useEffect(() => {\n        fetchNASA();\n        // getLocation();\n    }, []);\n\n    return (\n        <Col className=\"p-2\" md=\"auto\">\n            {/* <h2>{location}</h2> */}\n           <img className=\"loc-img\" src={NASAData} alt='map of your area'/>\n        </Col>\n    );\n};\n\nexport default NASA;","import React, { useState } from 'react';\nimport {Col, Button} from 'reactstrap';\nimport './WeatherResults.css';\n\nconst WeatherResults = (props) => {\n\n    // console.log(props);\n    let weatherData = props.weatherData;\n    // console.log(weatherData);\n\n    // convert wind speed from m/s to mph\n    let windSpeed = (weatherData.wind.speed * 2.23694).toPrecision(2);\n    let pressure = (weatherData.main.pressure * 0.030).toPrecision(4);\n\n    // const [temperatureKelvin, setTemperatureKelvin] = useState(weatherData.main.temp);\n    const [temperatureFahrenheit, setTemperatureFahrenheit] = useState(Math.floor(((weatherData.main.temp-273.15)*1.8)+32));\n    const [temperatureCelsius,  setTemperatureCelsius] = useState(Math.floor(weatherData.main.temp-273.15));\n    const [temperatureType,  setTemperatureType] = useState('Fahrenheit');\n\n    return(\n        <Col>\n                <h4>{weatherData.name}</h4>\n                <p><strong>Currently</strong> {weatherData.weather[0].main}</p>\n                <h5>Temperature</h5>\n                { temperatureType === 'Fahrenheit' ? \n                <div className=\"temp\">\n                {temperatureFahrenheit}&#176; <Button className=\"ml-2\" color=\"primary\" size=\"sm\" onClick={() => {setTemperatureType('Celsius')}}>Change to &deg;C</Button> \n                </div>\n                :\n                <div className=\"temp\">\n                {temperatureCelsius}&#176; <Button className=\"ml-2\" color=\"secondary\" size=\"sm\" onClick={() => {setTemperatureType('Fahrenheit')}}>Change to &deg;F</Button>\n                </div>\n                }\n                <h5>Humidity</h5>\n                <p> {weatherData.main.humidity}%</p>\n                <h5>Atmospheric Pressure</h5>\n                <p> {pressure} in</p>\n                <h5>Wind Speed</h5>\n                <p>{windSpeed} mph</p>\n\n        </Col>\n    )\n}\n\nexport default WeatherResults;","import React, { useState, useEffect } from 'react';\nimport {Col} from 'reactstrap';\nimport './OpenWeather.css';\nimport WeatherResults from \"./WeatherResults\"\n\nconst baseURL=\"https://api.openweathermap.org/data/2.5/weather\"\nconst key = \"203dcab38e74e0dd2117b8d81cc20e68\"\n\nconst OpenWeather = (props) => {\n    \n    const [latitude, setLatitude] = useState(props.latitude);\n    const [longitude, setLongitude] = useState(props.longitude);\n    const [weatherData, setWeatherData] = useState({});\n    \n    const fetchWeather = () => {\n    // let url = `${baseURL}?lat=${latitude}&lon=${longitude}&appid=${key}&units=metric`\n    let url = `${baseURL}?lat=${latitude}&lon=${longitude}&appid=${key}`\n    fetch(url)\n    .then(res => res.json())\n    .then(weatherData => setWeatherData(weatherData))\n    .catch(err => console.log(err))\n    };\n\n    useEffect(() => {\n        fetchWeather();\n    }, []);\n\n    // useEffect(() => {\n    //     console.log(weatherData);\n    // }, [weatherData]);\n\n    return (\n        <Col md=\"3\">\n            {weatherData.hasOwnProperty('weather') ? <WeatherResults weatherData={weatherData} /> : ''}\n        </Col>\n    );\n};\n\nexport default OpenWeather;","import React from 'react';\nimport {Card, CardBody, CardTitle, CardText, Col} from 'reactstrap';\nimport './Restaurant.css';\n\nconst Restaurant = (props) => {\n\n    // console.log(props);\n\n    return (\n        <Col md=\"4\">\n            <Card id=\"card\" className=\"p-2\">\n                <h3>\n                <CardTitle>{props.restaurant.restaurant.name}</CardTitle>\n                </h3>\n                <CardBody>\n                    <h5>Cuisine</h5>\n                    {props.restaurant.restaurant.cuisines !== '' ? <CardText>{props.restaurant.restaurant.cuisines}</CardText> : <CardText>No Data Available</CardText>}\n                    <h5>Average Price</h5>\n                    {/* <CardText>{props.restaurant.restaurant.average_cost_for_two}</CardText> */}\n                    {props.restaurant.restaurant.average_cost_for_two > 0 ? <CardText>${props.restaurant.restaurant.average_cost_for_two}</CardText> : <CardText>No Price Available</CardText>}\n                    <h5>Phone Number</h5> \n                    <CardText>{props.restaurant.restaurant.phone_numbers}</CardText>\n                    <h5>Address</h5>\n                    <CardText>{props.restaurant.restaurant.location.address}</CardText>\n                    <h5>Rating</h5>\n                    {props.restaurant.restaurant.user_rating.rating_text === 'Not rated' ? <CardText>No Rating Available</CardText> : <CardText>{props.restaurant.restaurant.user_rating.aggregate_rating}, {props.restaurant.restaurant.user_rating.rating_text}</CardText>}\n                </CardBody>\n            </Card>\n        </Col>\n    );\n};\n\nexport default Restaurant;","import React, {useState, useEffect} from 'react';\nimport {Row} from 'reactstrap';\nimport './Zomato.css';\nimport Restaurant from './Restaurant';\n\nconst Zomato = (props) => {\n\n    const [latitude, setLatitude] = useState(props.latitude);\n    const [longitude, setLongitude] = useState(props.longitude);\n    const [restaurants, setRestaurants] = useState([]);\n\n    const fetchRestaurants = () => {\n\n        // console.log(\"Latitude: \", latitude, \"Longitude: \" + longitude);\n\n        // Latitude:  39.9572992 Longitude: -86.1208576\n        // setLatitude('39.9572992');\n        // setLongitude('-86.1208576');\n\n        let baseURL = 'https://developers.zomato.com/api/v2.1/search?';\n        let searchString = `lat=${latitude}&lon=${longitude}&sort=real_distance&radius=500`;\n        let zomatoAPIKey= \"ac470f024f2131c285d68377ed5cc6d0\";\n        \n\n        fetch(baseURL + searchString, {\n            method: 'GET',\n            headers:    new Headers ({\n                'Content-Type': 'application/json',\n                'user-key': zomatoAPIKey\n            })\n        })\n        .then(res => res.json())\n        .then(restaurantData => setRestaurants(restaurantData.restaurants))\n        .catch(err => console.log(err))\n        \n    };\n\n    // useEffect(() => {\n    //     // getLocation();\n    //     setLatitude(props.latitude);\n    //     setLongitude(props.longitude);\n    //     // console.log(\"Latitude: \", latitude, \"Longitude: \" + longitude);\n    //     fetchRestaurants();\n    // }, [props.latitude, props.longitude]);\n\n    useEffect(() => {\n        fetchRestaurants();\n    }, []);\n\n\n    return (\n            <Row>\n            {/* {restaurants.length} */}\n            {restaurants.length > 0 ? restaurants.map(restaurant => <Restaurant restaurant={restaurant} />) : ''}\n            </Row>\n    );\n};\n\nexport default Zomato;","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport {Container, Col, Row} from 'reactstrap';\nimport NASA from \"./components/NASA/NASA\";\nimport OpenWeather from \"./components/OpenWeather/OpenWeather\";\nimport Zomato from \"./components/Zomato/Zomato\";\n\nfunction App() {\n  const [latitude, setLatitude] = useState(\"\");\n  const [longitude, setLongitude] = useState(\"\");\n  const [locationDataFound, setLocationDataFound] = useState(false);\n  const [geolocationAvailable, setGeolocationAvailable] = useState(true);\n\n  useEffect(() => {\n    getLocation();\n    // console.log(\"Latitude: \", latitude, \"Longitude: \" + longitude);\n  }, []);\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n      setGeolocationAvailable(false);\n    }\n  };\n\n  const showPosition = (position) => {\n    // console.log(\"Latitude: \", position.coords.latitude, \"Longitude: \" + position.coords.longitude);\n    setLatitude(position.coords.latitude);\n    setLongitude(position.coords.longitude);\n  };\n\n  useEffect(() => {\n    if (latitude && longitude) {\n      // console.log(\"Latitude: \", latitude, \"Longitude: \" + longitude);\n      setLocationDataFound(true);\n    }\n  }, [latitude, longitude]);\n\n  const locationComponents = () => {\n    return (\n      <Container>\n        <Row className=\"justify-content-center\">\n          <OpenWeather latitude={latitude} longitude={longitude} />\n          <NASA latitude={latitude} longitude={longitude} />\n        </Row>\n        <Row className=\"justify-content-center\">\n        <Col>\n        <Zomato latitude={latitude} longitude={longitude} />\n        </Col>\n        </Row>\n      </Container>\n    );\n  };\n\n\n  return (\n    <div>\n      <h1 className=\"applicationHeader\">24 Hour Project</h1>\n      {console.log(locationDataFound)}\n      {console.log(geolocationAvailable)}\n      {locationDataFound ? locationComponents() : <h2>Geolocation is not supported by this browser.</h2>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}